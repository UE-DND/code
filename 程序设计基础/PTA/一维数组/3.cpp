/**********************************

一家超市有一种促销方式，如果购买金额超过一定门槛，顾客会收到随机贴纸。
贴纸有不同的类型，每种类型都由一个数字表示，这个数字是1到100之间的一个数字。
收集到三个连续数字的贴纸后，可以兑换一份小礼物。
小明经常在这家超市购物，并积累了大量的贴纸。
你能帮他算出他能换多少个小礼物吗？

输入格式：
第一行包含一个正整数 N(1<N<100)，代表小明拥有的贴纸数量。
第二行包含N个正整数 Pi(1⩽Pi⩽1000)，每个代表一个贴纸的数量。

输出格式：
输出一个数字，表示小明可以交换多少个小礼物。
如果无法交换礼物，则输出0

输入示例：
6
3 2 4 6 6 4

输出示例：
1

2，3和4组成一组，而剩下的4，6，6不是连续的数字。

***********************************/

//直接引用了第2题的排序，不要在意为什么有score
#include <stdio.h>

int main(void) {

    int n;
    scanf("%d", &n);
    int gift_count = 0;

    int count[1001] = {0};  //数组用于存储每个分数的出现次数，下标位为分数值
    //注意count[100]只能表示0~99之间的分数
    for (int i = 0; i < n; i++) {
        int score;
        scanf("%d", &score);
        count[score]++;
    }

    int stickers[1001];  //用于存储排序后的贴纸
    int k = 0;  //写入的索引

    for (int i = 0; i <= 1000; i++) {
        while (count[i] > 0) {
            stickers[k++] = i;
            count[i]--;
        }
    }

    int i = 0;
    while (i <= n - 3) {
        if (stickers[i+1] == stickers[i] + 1 && stickers[i+2] == stickers[i] + 2) {
            gift_count++;  // 找到三个连续的数字，可以兑换一个小礼物
            i += 3;  // 跳过这三个数字
        } else {
            i++;
        }
    }

    printf("%d\n", gift_count);

return 0;
}


